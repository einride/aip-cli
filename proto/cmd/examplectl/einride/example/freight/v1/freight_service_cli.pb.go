package freightv1

import (
	cobra "github.com/spf13/cobra"
	cli "go.einride.tech/protoc-gen-go-cli/cli"
	protoflag "go.einride.tech/protoc-gen-go-cli/protoflag"
	protojson "google.golang.org/protobuf/encoding/protojson"
	os "os"
)

// Code generated by protoc-gen-go-cli. DO NOT EDIT.
// versions:
// 	protoc        v3.17.3

func NewFreightServiceCommand(use string) *cobra.Command {
	cmd := &cobra.Command{
		Use:   use,
		Short: "this api represents a simple freight service",
		Annotations: map[string]string{
			"type": "service",
		},
		PersistentPreRun: func(cmd *cobra.Command, _ []string) {
			cli.SetDefaultHost(cmd.Context(), "freight-example.einride.tech")
		},
	}
	cmd.AddCommand(newFreightServiceGetShipperCommand())
	cmd.AddCommand(newFreightServiceListShippersCommand())
	cmd.AddCommand(newFreightServiceCreateShipperCommand())
	cmd.AddCommand(newFreightServiceUpdateShipperCommand())
	cmd.AddCommand(newFreightServiceDeleteShipperCommand())
	cmd.AddCommand(newFreightServiceGetSiteCommand())
	cmd.AddCommand(newFreightServiceListSitesCommand())
	cmd.AddCommand(newFreightServiceCreateSiteCommand())
	cmd.AddCommand(newFreightServiceUpdateSiteCommand())
	cmd.AddCommand(newFreightServiceDeleteSiteCommand())
	cmd.AddCommand(newFreightServiceBatchGetSitesCommand())
	cmd.AddCommand(newFreightServiceGetShipmentCommand())
	cmd.AddCommand(newFreightServiceListShipmentsCommand())
	cmd.AddCommand(newFreightServiceCreateShipmentCommand())
	cmd.AddCommand(newFreightServiceUpdateShipmentCommand())
	cmd.AddCommand(newFreightServiceDeleteShipmentCommand())
	return cmd
}

func newFreightServiceGetShipperCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "get-shipper",
		Short: "get a shipper",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Name protoflag.String
	cmd.Flags().Var(
		&flag_Name,
		"name",
		"the resource name of the shipper to retrieve",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"name",
		cli.ResourceNameCompletionFunc(
			"shippers/{shipper}",
		),
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request GetShipperRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("name") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Name.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.GetShipper(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceListShippersCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "list-shippers",
		Short: "list shippers",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_PageSize protoflag.Int32
	cmd.Flags().Var(
		&flag_PageSize,
		"page-size",
		"requested page size",
	)
	var flag_PageToken protoflag.String
	cmd.Flags().Var(
		&flag_PageToken,
		"page-token",
		"a token identifying a page of results the server should return",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request ListShippersRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("page-size") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("page_size"), flag_PageSize.ProtoReflectValue())
		}
		if cmd.Flags().Changed("page-token") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("page_token"), flag_PageToken.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.ListShippers(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceCreateShipperCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "create-shipper",
		Short: "create a shipper",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Shipper_Name protoflag.String
	cmd.Flags().Var(
		&flag_Shipper_Name,
		"shipper.name",
		"the resource name of the shipper",
	)
	var flag_Shipper_DisplayName protoflag.String
	cmd.Flags().Var(
		&flag_Shipper_DisplayName,
		"shipper.display-name",
		"the display name of the shipper",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request CreateShipperRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("shipper.name") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipper")).Message()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Shipper_Name.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipper.display-name") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipper")).Message()
			r.Set(r.Descriptor().Fields().ByName("display_name"), flag_Shipper_DisplayName.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.CreateShipper(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceUpdateShipperCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "update-shipper",
		Short: "update a shipper",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Shipper_Name protoflag.String
	cmd.Flags().Var(
		&flag_Shipper_Name,
		"shipper.name",
		"the resource name of the shipper",
	)
	var flag_Shipper_DisplayName protoflag.String
	cmd.Flags().Var(
		&flag_Shipper_DisplayName,
		"shipper.display-name",
		"the display name of the shipper",
	)
	var flag_UpdateMask_Paths protoflag.StringList
	cmd.Flags().Var(
		&flag_UpdateMask_Paths,
		"update-mask.paths",
		"the set of field mask paths",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request UpdateShipperRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("shipper.name") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipper")).Message()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Shipper_Name.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipper.display-name") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipper")).Message()
			r.Set(r.Descriptor().Fields().ByName("display_name"), flag_Shipper_DisplayName.ProtoReflectValue())
		}
		if cmd.Flags().Changed("update-mask.paths") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("update_mask")).Message()
			r.Set(r.Descriptor().Fields().ByName("paths"), flag_UpdateMask_Paths.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.UpdateShipper(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceDeleteShipperCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "delete-shipper",
		Short: "delete a shipper",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Name protoflag.String
	cmd.Flags().Var(
		&flag_Name,
		"name",
		"the resource name of the shipper to delete",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"name",
		cli.ResourceNameCompletionFunc(
			"shippers/{shipper}",
		),
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request DeleteShipperRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("name") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Name.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.DeleteShipper(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceGetSiteCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "get-site",
		Short: "get a site",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Name protoflag.String
	cmd.Flags().Var(
		&flag_Name,
		"name",
		"the resource name of the site to retrieve",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"name",
		cli.ResourceNameCompletionFunc(
			"shippers/{shipper}/sites/{site}",
		),
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request GetSiteRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("name") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Name.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.GetSite(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceListSitesCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "list-sites",
		Short: "list sites for a shipper",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Parent protoflag.String
	cmd.Flags().Var(
		&flag_Parent,
		"parent",
		"the resource name of the parent, which owns this collection of sites",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"parent",
		cli.ResourceNameCompletionFunc(
			"shippers/{shipper}",
		),
	)
	var flag_PageSize protoflag.Int32
	cmd.Flags().Var(
		&flag_PageSize,
		"page-size",
		"requested page size",
	)
	var flag_PageToken protoflag.String
	cmd.Flags().Var(
		&flag_PageToken,
		"page-token",
		"a token identifying a page of results the server should return",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request ListSitesRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("parent") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("parent"), flag_Parent.ProtoReflectValue())
		}
		if cmd.Flags().Changed("page-size") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("page_size"), flag_PageSize.ProtoReflectValue())
		}
		if cmd.Flags().Changed("page-token") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("page_token"), flag_PageToken.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.ListSites(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceCreateSiteCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "create-site",
		Short: "create a site",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Parent protoflag.String
	cmd.Flags().Var(
		&flag_Parent,
		"parent",
		"the resource name of the parent shipper for which this site will be created",
	)
	var flag_Site_Name protoflag.String
	cmd.Flags().Var(
		&flag_Site_Name,
		"site.name",
		"the resource name of the site",
	)
	var flag_Site_DisplayName protoflag.String
	cmd.Flags().Var(
		&flag_Site_DisplayName,
		"site.display-name",
		"the display name of the site",
	)
	var flag_Site_LatLng_Latitude protoflag.Double
	cmd.Flags().Var(
		&flag_Site_LatLng_Latitude,
		"site.lat-lng.latitude",
		"the latitude in degrees",
	)
	var flag_Site_LatLng_Longitude protoflag.Double
	cmd.Flags().Var(
		&flag_Site_LatLng_Longitude,
		"site.lat-lng.longitude",
		"the longitude in degrees",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request CreateSiteRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("parent") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("parent"), flag_Parent.ProtoReflectValue())
		}
		if cmd.Flags().Changed("site.name") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("site")).Message()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Site_Name.ProtoReflectValue())
		}
		if cmd.Flags().Changed("site.display-name") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("site")).Message()
			r.Set(r.Descriptor().Fields().ByName("display_name"), flag_Site_DisplayName.ProtoReflectValue())
		}
		if cmd.Flags().Changed("site.lat-lng.latitude") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("site")).Message()
			r = r.Mutable(r.Descriptor().Fields().ByName("lat_lng")).Message()
			r.Set(r.Descriptor().Fields().ByName("latitude"), flag_Site_LatLng_Latitude.ProtoReflectValue())
		}
		if cmd.Flags().Changed("site.lat-lng.longitude") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("site")).Message()
			r = r.Mutable(r.Descriptor().Fields().ByName("lat_lng")).Message()
			r.Set(r.Descriptor().Fields().ByName("longitude"), flag_Site_LatLng_Longitude.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.CreateSite(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceUpdateSiteCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "update-site",
		Short: "update a site",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Site_Name protoflag.String
	cmd.Flags().Var(
		&flag_Site_Name,
		"site.name",
		"the resource name of the site",
	)
	var flag_Site_DisplayName protoflag.String
	cmd.Flags().Var(
		&flag_Site_DisplayName,
		"site.display-name",
		"the display name of the site",
	)
	var flag_Site_LatLng_Latitude protoflag.Double
	cmd.Flags().Var(
		&flag_Site_LatLng_Latitude,
		"site.lat-lng.latitude",
		"the latitude in degrees",
	)
	var flag_Site_LatLng_Longitude protoflag.Double
	cmd.Flags().Var(
		&flag_Site_LatLng_Longitude,
		"site.lat-lng.longitude",
		"the longitude in degrees",
	)
	var flag_UpdateMask_Paths protoflag.StringList
	cmd.Flags().Var(
		&flag_UpdateMask_Paths,
		"update-mask.paths",
		"the set of field mask paths",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request UpdateSiteRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("site.name") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("site")).Message()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Site_Name.ProtoReflectValue())
		}
		if cmd.Flags().Changed("site.display-name") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("site")).Message()
			r.Set(r.Descriptor().Fields().ByName("display_name"), flag_Site_DisplayName.ProtoReflectValue())
		}
		if cmd.Flags().Changed("site.lat-lng.latitude") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("site")).Message()
			r = r.Mutable(r.Descriptor().Fields().ByName("lat_lng")).Message()
			r.Set(r.Descriptor().Fields().ByName("latitude"), flag_Site_LatLng_Latitude.ProtoReflectValue())
		}
		if cmd.Flags().Changed("site.lat-lng.longitude") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("site")).Message()
			r = r.Mutable(r.Descriptor().Fields().ByName("lat_lng")).Message()
			r.Set(r.Descriptor().Fields().ByName("longitude"), flag_Site_LatLng_Longitude.ProtoReflectValue())
		}
		if cmd.Flags().Changed("update-mask.paths") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("update_mask")).Message()
			r.Set(r.Descriptor().Fields().ByName("paths"), flag_UpdateMask_Paths.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.UpdateSite(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceDeleteSiteCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "delete-site",
		Short: "delete a site",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Name protoflag.String
	cmd.Flags().Var(
		&flag_Name,
		"name",
		"the resource name of the site to delete",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"name",
		cli.ResourceNameCompletionFunc(
			"shippers/{shipper}/sites/{site}",
		),
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request DeleteSiteRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("name") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Name.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.DeleteSite(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceBatchGetSitesCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "batch-get-sites",
		Short: "batch get sites",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Parent protoflag.String
	cmd.Flags().Var(
		&flag_Parent,
		"parent",
		"the parent resource shared by all sites being retrieved",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"parent",
		cli.ResourceNameCompletionFunc(
			"shippers/{shipper}",
		),
	)
	var flag_Names protoflag.StringList
	cmd.Flags().Var(
		&flag_Names,
		"names",
		"the names of the sites to retrieve",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"names",
		cli.ResourceNameCompletionFunc(
			"shippers/{shipper}/sites/{site}",
		),
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request BatchGetSitesRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("parent") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("parent"), flag_Parent.ProtoReflectValue())
		}
		if cmd.Flags().Changed("names") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("names"), flag_Names.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.BatchGetSites(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceGetShipmentCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "get-shipment",
		Short: "get a shipment",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Name protoflag.String
	cmd.Flags().Var(
		&flag_Name,
		"name",
		"the resource name of the shipment to retrieve",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"name",
		cli.ResourceNameCompletionFunc(
			"shippers/{shipper}/shipments/{shipment}",
		),
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request GetShipmentRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("name") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Name.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.GetShipment(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceListShipmentsCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "list-shipments",
		Short: "list shipments for a shipper",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Parent protoflag.String
	cmd.Flags().Var(
		&flag_Parent,
		"parent",
		"the resource name of the parent, which owns this collection of shipments",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"parent",
		cli.ResourceNameCompletionFunc(
			"shippers/{shipper}",
		),
	)
	var flag_PageSize protoflag.Int32
	cmd.Flags().Var(
		&flag_PageSize,
		"page-size",
		"requested page size",
	)
	var flag_PageToken protoflag.String
	cmd.Flags().Var(
		&flag_PageToken,
		"page-token",
		"a token identifying a page of results the server should return",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request ListShipmentsRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("parent") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("parent"), flag_Parent.ProtoReflectValue())
		}
		if cmd.Flags().Changed("page-size") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("page_size"), flag_PageSize.ProtoReflectValue())
		}
		if cmd.Flags().Changed("page-token") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("page_token"), flag_PageToken.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.ListShipments(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceCreateShipmentCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "create-shipment",
		Short: "create a shipment",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Parent protoflag.String
	cmd.Flags().Var(
		&flag_Parent,
		"parent",
		"the resource name of the parent shipper for which this shipment will be created",
	)
	var flag_Shipment_Name protoflag.String
	cmd.Flags().Var(
		&flag_Shipment_Name,
		"shipment.name",
		"the resource name of the shipment",
	)
	var flag_Shipment_OriginSite protoflag.String
	cmd.Flags().Var(
		&flag_Shipment_OriginSite,
		"shipment.origin-site",
		"the resource name of the origin site of the shipment",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"shipment.origin-site",
		cli.ResourceNameCompletionFunc(
			"shippers/{shipper}/sites/{site}",
		),
	)
	var flag_Shipment_DestinationSite protoflag.String
	cmd.Flags().Var(
		&flag_Shipment_DestinationSite,
		"shipment.destination-site",
		"the resource name of the destination site of the shipment",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"shipment.destination-site",
		cli.ResourceNameCompletionFunc(
			"shippers/{shipper}/sites/{site}",
		),
	)
	var flag_Shipment_PickupEarliestTime protoflag.Timestamp
	cmd.Flags().Var(
		&flag_Shipment_PickupEarliestTime,
		"shipment.pickup-earliest-time",
		"the earliest pickup time of the shipment at the origin site",
	)
	var flag_Shipment_PickupLatestTime protoflag.Timestamp
	cmd.Flags().Var(
		&flag_Shipment_PickupLatestTime,
		"shipment.pickup-latest-time",
		"the latest pickup time of the shipment at the origin site",
	)
	var flag_Shipment_DeliveryEarliestTime protoflag.Timestamp
	cmd.Flags().Var(
		&flag_Shipment_DeliveryEarliestTime,
		"shipment.delivery-earliest-time",
		"the earliest delivery time of the shipment at the destination site",
	)
	var flag_Shipment_DeliveryLatestTime protoflag.Timestamp
	cmd.Flags().Var(
		&flag_Shipment_DeliveryLatestTime,
		"shipment.delivery-latest-time",
		"the latest delivery time of the shipment at the destination site",
	)
	var flag_Shipment_Annotations protoflag.StringStringMap
	cmd.Flags().Var(
		&flag_Shipment_Annotations,
		"shipment.annotations",
		"annotations of the shipment",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request CreateShipmentRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("parent") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("parent"), flag_Parent.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.name") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Shipment_Name.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.origin-site") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("origin_site"), flag_Shipment_OriginSite.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.destination-site") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("destination_site"), flag_Shipment_DestinationSite.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.pickup-earliest-time") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("pickup_earliest_time"), flag_Shipment_PickupEarliestTime.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.pickup-latest-time") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("pickup_latest_time"), flag_Shipment_PickupLatestTime.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.delivery-earliest-time") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("delivery_earliest_time"), flag_Shipment_DeliveryEarliestTime.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.delivery-latest-time") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("delivery_latest_time"), flag_Shipment_DeliveryLatestTime.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.annotations") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("annotations"), flag_Shipment_Annotations.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.CreateShipment(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceUpdateShipmentCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "update-shipment",
		Short: "update a shipment",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Shipment_Name protoflag.String
	cmd.Flags().Var(
		&flag_Shipment_Name,
		"shipment.name",
		"the resource name of the shipment",
	)
	var flag_Shipment_OriginSite protoflag.String
	cmd.Flags().Var(
		&flag_Shipment_OriginSite,
		"shipment.origin-site",
		"the resource name of the origin site of the shipment",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"shipment.origin-site",
		cli.ResourceNameCompletionFunc(
			"shippers/{shipper}/sites/{site}",
		),
	)
	var flag_Shipment_DestinationSite protoflag.String
	cmd.Flags().Var(
		&flag_Shipment_DestinationSite,
		"shipment.destination-site",
		"the resource name of the destination site of the shipment",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"shipment.destination-site",
		cli.ResourceNameCompletionFunc(
			"shippers/{shipper}/sites/{site}",
		),
	)
	var flag_Shipment_PickupEarliestTime protoflag.Timestamp
	cmd.Flags().Var(
		&flag_Shipment_PickupEarliestTime,
		"shipment.pickup-earliest-time",
		"the earliest pickup time of the shipment at the origin site",
	)
	var flag_Shipment_PickupLatestTime protoflag.Timestamp
	cmd.Flags().Var(
		&flag_Shipment_PickupLatestTime,
		"shipment.pickup-latest-time",
		"the latest pickup time of the shipment at the origin site",
	)
	var flag_Shipment_DeliveryEarliestTime protoflag.Timestamp
	cmd.Flags().Var(
		&flag_Shipment_DeliveryEarliestTime,
		"shipment.delivery-earliest-time",
		"the earliest delivery time of the shipment at the destination site",
	)
	var flag_Shipment_DeliveryLatestTime protoflag.Timestamp
	cmd.Flags().Var(
		&flag_Shipment_DeliveryLatestTime,
		"shipment.delivery-latest-time",
		"the latest delivery time of the shipment at the destination site",
	)
	var flag_Shipment_Annotations protoflag.StringStringMap
	cmd.Flags().Var(
		&flag_Shipment_Annotations,
		"shipment.annotations",
		"annotations of the shipment",
	)
	var flag_UpdateMask_Paths protoflag.StringList
	cmd.Flags().Var(
		&flag_UpdateMask_Paths,
		"update-mask.paths",
		"the set of field mask paths",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request UpdateShipmentRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("shipment.name") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Shipment_Name.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.origin-site") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("origin_site"), flag_Shipment_OriginSite.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.destination-site") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("destination_site"), flag_Shipment_DestinationSite.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.pickup-earliest-time") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("pickup_earliest_time"), flag_Shipment_PickupEarliestTime.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.pickup-latest-time") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("pickup_latest_time"), flag_Shipment_PickupLatestTime.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.delivery-earliest-time") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("delivery_earliest_time"), flag_Shipment_DeliveryEarliestTime.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.delivery-latest-time") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("delivery_latest_time"), flag_Shipment_DeliveryLatestTime.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.annotations") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("annotations"), flag_Shipment_Annotations.ProtoReflectValue())
		}
		if cmd.Flags().Changed("update-mask.paths") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("update_mask")).Message()
			r.Set(r.Descriptor().Fields().ByName("paths"), flag_UpdateMask_Paths.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.UpdateShipment(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newFreightServiceDeleteShipmentCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "delete-shipment",
		Short: "delete a shipment",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Name protoflag.String
	cmd.Flags().Var(
		&flag_Name,
		"name",
		"the resource name of the shipment to delete",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"name",
		cli.ResourceNameCompletionFunc(
			"shippers/{shipper}/shipments/{shipment}",
		),
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request DeleteShipmentRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("name") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Name.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewFreightServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.DeleteShipment(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}
