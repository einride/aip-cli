package gencli

import (
	"fmt"

	"go.einride.tech/aip-cli/aipcli"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoregistry"
)

const generateFilenameSuffix = "_cli.pb.go"

func GenerateFile(
	gen *protogen.Plugin,
	files *protoregistry.Files,
	file *protogen.File,
	config aipcli.CompilerConfig,
) error {
	g := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+generateFilenameSuffix, file.GoImportPath)
	g.Skip()
	generateGeneratedFileHeader(g, gen)
	g.P("package ", file.GoPackageName)
	for _, service := range file.Services {
		g.Unskip()
		if err := (newServiceCommandCodeGenerator{
			gen:     gen,
			files:   files,
			file:    file,
			service: service,
		}.generateCode(g)); err != nil {
			return err
		}
	}
	return nil
}

func generateGeneratedFileHeader(g *protogen.GeneratedFile, gen *protogen.Plugin) {
	g.P()
	g.P("// Code generated by aip-cli. DO NOT EDIT.")
	g.P("// versions:")
	protocVersion := "(unknown)"
	if v := gen.Request.GetCompilerVersion(); v != nil {
		protocVersion = fmt.Sprintf("v%v.%v.%v", v.GetMajor(), v.GetMinor(), v.GetPatch())
		if s := v.GetSuffix(); s != "" {
			protocVersion += "-" + s
		}
	}
	g.P("// \tprotoc        ", protocVersion)
}
